import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';

/// A stateless widget that plots a graph based on a mathematical formula evaluator.
///
/// This widget uses the `LineChart` from the `fl_chart` package to plot a graph.
/// It takes a function that evaluates a mathematical expression as a parameter,
/// and it plots the result over a range of x-values.
class FormulaPlot extends StatelessWidget {
  /// Constructor for the `FormulaPlot` widget.
  ///
  /// Takes a required [evaluator] function that evaluates the formula based on
  /// the value of `x`.
  const FormulaPlot({super.key, required this.evaluator});

  /// The evaluator function that computes the y-value for a given x.
  ///
  /// This function is passed by the user and determines the formula that will be plotted.
  final double Function(double x) evaluator;

  @override
  Widget build(BuildContext context) {
    return LineChart(
      LineChartData(
        lineBarsData: [
          LineChartBarData(
            // Data points for the graph generated by the evaluator function.
            spots: generateDataPoints(),
            isCurved: true,
            dotData: const FlDotData(show: false),
            color: Colors.blue,
            barWidth: 3,
          ),
        ],
        // Show the titles for the axes (x and y)
        titlesData: const FlTitlesData(show: true),
        // Display the grid on the chart
        gridData: const FlGridData(show: true),
        // Display the border around the chart
        borderData: FlBorderData(show: true),
      ),
    );
  }

  /// Generates the data points to be plotted on the graph.
  ///
  /// This method evaluates the formula using the [evaluator] function for a range
  /// of x-values from -10 to 10, incrementing by 0.5. Each (x, y) pair is stored
  /// as an [FlSpot] and returned as a list of points for the graph.
  List<FlSpot> generateDataPoints() {
    List<FlSpot> points = [];
    for (double x = -10; x <= 10; x += 0.5) {
      double y = evaluator(x);
      points.add(FlSpot(x, y));
    }
    return points;
  }
}
